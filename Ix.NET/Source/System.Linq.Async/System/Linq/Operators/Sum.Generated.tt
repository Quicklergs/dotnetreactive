<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information. 

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace System.Linq
{
    public static partial class AsyncEnumerable
    {
<#
var os = new[]
{
    new { type = "int", zero = "0", @checked = true },
    new { type = "long", zero = "0L", @checked = true },
    new { type = "float", zero = "0.0f", @checked = false },
    new { type = "double", zero = "0.0", @checked = false },
    new { type = "decimal", zero = "0m", @checked = false },
    new { type = "int?", zero = "0", @checked = true },
    new { type = "long?", zero = "0L", @checked = true },
    new { type = "float?", zero = "0.0f", @checked = false },
    new { type = "double?", zero = "0.0", @checked = false },
    new { type = "decimal?", zero = "0m", @checked = false },
};

foreach (var o in os)
{
    var n = o.type.EndsWith("?") ? ".GetValueOrDefault()" : "";
#>
        public static Task<<#=o.type#>> Sum(this IAsyncEnumerable<<#=o.type#>> source)
        {
            if (source == null)
                throw Error.ArgumentNull(nameof(source));

            return SumCore(source, CancellationToken.None);
        }

        public static Task<<#=o.type#>> Sum(this IAsyncEnumerable<<#=o.type#>> source, CancellationToken cancellationToken)
        {
            if (source == null)
                throw Error.ArgumentNull(nameof(source));

            return SumCore(source, cancellationToken);
        }

        public static Task<<#=o.type#>> Sum<TSource>(this IAsyncEnumerable<TSource> source, Func<TSource, <#=o.type#>> selector)
        {
            if (source == null)
                throw Error.ArgumentNull(nameof(source));
            if (selector == null)
                throw Error.ArgumentNull(nameof(selector));

            return SumCore(source, selector, CancellationToken.None);
        }

        public static Task<<#=o.type#>> Sum<TSource>(this IAsyncEnumerable<TSource> source, Func<TSource, <#=o.type#>> selector, CancellationToken cancellationToken)
        {
            if (source == null)
                throw Error.ArgumentNull(nameof(source));
            if (selector == null)
                throw Error.ArgumentNull(nameof(selector));

            return SumCore(source, selector, cancellationToken);
        }

        public static Task<<#=o.type#>> Sum<TSource>(this IAsyncEnumerable<TSource> source, Func<TSource, Task<<#=o.type#>>> selector)
        {
            if (source == null)
                throw Error.ArgumentNull(nameof(source));
            if (selector == null)
                throw Error.ArgumentNull(nameof(selector));

            return SumCore(source, selector, CancellationToken.None);
        }

        public static Task<<#=o.type#>> Sum<TSource>(this IAsyncEnumerable<TSource> source, Func<TSource, Task<<#=o.type#>>> selector, CancellationToken cancellationToken)
        {
            if (source == null)
                throw Error.ArgumentNull(nameof(source));
            if (selector == null)
                throw Error.ArgumentNull(nameof(selector));

            return SumCore(source, selector, cancellationToken);
        }

        private static async Task<<#=o.type#>> SumCore(IAsyncEnumerable<<#=o.type#>> source, CancellationToken cancellationToken)
        {
            var sum = <#=o.zero#>;

            var e = source.GetAsyncEnumerator(cancellationToken);

            try
            {
                while (await e.MoveNextAsync().ConfigureAwait(false))
                {
<#
if (o.@checked)
{
#>
                    checked
                    {
                        sum += e.Current<#=n#>;
                    }
<#
}
else
{
#>
                    sum += e.Current<#=n#>;
<#
}
#>
                }
            }
            finally
            {
                await e.DisposeAsync().ConfigureAwait(false);
            }

            return sum;
        }

        private static async Task<<#=o.type#>> SumCore<TSource>(IAsyncEnumerable<TSource> source, Func<TSource, <#=o.type#>> selector, CancellationToken cancellationToken)
        {
            var sum = <#=o.zero#>;

            var e = source.GetAsyncEnumerator(cancellationToken);

            try
            {
                while (await e.MoveNextAsync().ConfigureAwait(false))
                {
                    var value = selector(e.Current);

<#
if (o.@checked)
{
#>
                    checked
                    {
                        sum += value<#=n#>;
                    }
<#
}
else
{
#>
                    sum += value<#=n#>;
<#
}
#>
                }
            }
            finally
            {
                await e.DisposeAsync().ConfigureAwait(false);
            }

            return sum;
        }

        private static async Task<<#=o.type#>> SumCore<TSource>(IAsyncEnumerable<TSource> source, Func<TSource, Task<<#=o.type#>>> selector, CancellationToken cancellationToken)
        {
            var sum = <#=o.zero#>;

            var e = source.GetAsyncEnumerator(cancellationToken);

            try
            {
                while (await e.MoveNextAsync().ConfigureAwait(false))
                {
                    var value = await selector(e.Current).ConfigureAwait(false);

<#
if (o.@checked)
{
#>
                    checked
                    {
                        sum += value<#=n#>;
                    }
<#
}
else
{
#>
                    sum += value<#=n#>;
<#
}
#>
                }
            }
            finally
            {
                await e.DisposeAsync().ConfigureAwait(false);
            }

            return sum;
        }

<#
}
#>
    }
}
